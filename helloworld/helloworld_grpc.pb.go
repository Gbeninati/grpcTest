// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	NuevoPedidoPyme(ctx context.Context, in *PedidoPyme, opts ...grpc.CallOption) (*RespuestaPedido, error)
	NuevoPedidoRetail(ctx context.Context, in *PedidoRetail, opts ...grpc.CallOption) (*RespuestaPedido, error)
	SeguirPaquete(ctx context.Context, in *RespuestaPedido, opts ...grpc.CallOption) (*RespuestaPedido, error)
	//rpc Camiones(HelloRequest) returns (HelloReply) {}
	Camiones(ctx context.Context, in *PaqueteCamion, opts ...grpc.CallOption) (*RespuestaPedido, error)
	ActualizarEstado(ctx context.Context, in *NuevoEstado, opts ...grpc.CallOption) (*RespuestaPedido, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) NuevoPedidoPyme(ctx context.Context, in *PedidoPyme, opts ...grpc.CallOption) (*RespuestaPedido, error) {
	out := new(RespuestaPedido)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/NuevoPedidoPyme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) NuevoPedidoRetail(ctx context.Context, in *PedidoRetail, opts ...grpc.CallOption) (*RespuestaPedido, error) {
	out := new(RespuestaPedido)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/NuevoPedidoRetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SeguirPaquete(ctx context.Context, in *RespuestaPedido, opts ...grpc.CallOption) (*RespuestaPedido, error) {
	out := new(RespuestaPedido)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SeguirPaquete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Camiones(ctx context.Context, in *PaqueteCamion, opts ...grpc.CallOption) (*RespuestaPedido, error) {
	out := new(RespuestaPedido)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/Camiones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ActualizarEstado(ctx context.Context, in *NuevoEstado, opts ...grpc.CallOption) (*RespuestaPedido, error) {
	out := new(RespuestaPedido)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/ActualizarEstado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	NuevoPedidoPyme(context.Context, *PedidoPyme) (*RespuestaPedido, error)
	NuevoPedidoRetail(context.Context, *PedidoRetail) (*RespuestaPedido, error)
	SeguirPaquete(context.Context, *RespuestaPedido) (*RespuestaPedido, error)
	//rpc Camiones(HelloRequest) returns (HelloReply) {}
	Camiones(context.Context, *PaqueteCamion) (*RespuestaPedido, error)
	ActualizarEstado(context.Context, *NuevoEstado) (*RespuestaPedido, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) NuevoPedidoPyme(context.Context, *PedidoPyme) (*RespuestaPedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NuevoPedidoPyme not implemented")
}
func (UnimplementedGreeterServer) NuevoPedidoRetail(context.Context, *PedidoRetail) (*RespuestaPedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NuevoPedidoRetail not implemented")
}
func (UnimplementedGreeterServer) SeguirPaquete(context.Context, *RespuestaPedido) (*RespuestaPedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeguirPaquete not implemented")
}
func (UnimplementedGreeterServer) Camiones(context.Context, *PaqueteCamion) (*RespuestaPedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Camiones not implemented")
}
func (UnimplementedGreeterServer) ActualizarEstado(context.Context, *NuevoEstado) (*RespuestaPedido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarEstado not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_NuevoPedidoPyme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoPyme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).NuevoPedidoPyme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/NuevoPedidoPyme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).NuevoPedidoPyme(ctx, req.(*PedidoPyme))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_NuevoPedidoRetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoRetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).NuevoPedidoRetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/NuevoPedidoRetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).NuevoPedidoRetail(ctx, req.(*PedidoRetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SeguirPaquete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespuestaPedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SeguirPaquete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SeguirPaquete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SeguirPaquete(ctx, req.(*RespuestaPedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Camiones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaqueteCamion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Camiones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/Camiones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Camiones(ctx, req.(*PaqueteCamion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ActualizarEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NuevoEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ActualizarEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/ActualizarEstado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ActualizarEstado(ctx, req.(*NuevoEstado))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NuevoPedidoPyme",
			Handler:    _Greeter_NuevoPedidoPyme_Handler,
		},
		{
			MethodName: "NuevoPedidoRetail",
			Handler:    _Greeter_NuevoPedidoRetail_Handler,
		},
		{
			MethodName: "SeguirPaquete",
			Handler:    _Greeter_SeguirPaquete_Handler,
		},
		{
			MethodName: "Camiones",
			Handler:    _Greeter_Camiones_Handler,
		},
		{
			MethodName: "ActualizarEstado",
			Handler:    _Greeter_ActualizarEstado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
